1.Find pivot index(leetcode)

class Solution {
    public int pivotIndex(int[] nums) {
        int n=nums.length;
        int p[]=new int[n];
        int s[]=new int[n];
        p[0]=nums[0];
        s[n-1]=nums[n-1];
        for(int i=1;i<n;i++){
            p[i]=nums[i]+p[i-1];
        }
        for(int j=n-2;j>=0;j--){
            s[j]=nums[j]+s[j+1];
        }
        for(int i=0;i<n;i++){
            if(p[i]==s[i])
                return i;   
        } return -1;
    }
}

note:ASCII
0-9 = 48-57
A-Z = 65-90
a-z = 97-122

2. To print all the characters in keyboard including emoji's(online gdb)

public class Main
{
	public static void main(String[] args) {
	    for(int i=1;i<12345;i++)
		System.out.print((char)i+" ");
	}
}

3.Count type of Characters(gfg)

class Sol {
    int[] count(String s) {
        int[] ans=new int[4];
        for(int i=0;i<s.length();i++){
            char ch=s.charAt(i);
            int ascii=(int)ch;
            if(ascii>=65 && ascii<=90)
                ans[0]++;
            else if(ascii>=97 && ascii<=122)
                ans[1]++;
            else if(ascii>=48&& ascii<=57)
                ans[2]++;
            else 
                ans[3]++;    
        }
        return ans;
    }
}

4.palindrome string(gfg)

class Solution {
    boolean isPalindrome(String s) {
        int l=s.length();
        int j=l-1;
        int i=0;
        while(i<j){
            if(s.charAt(i)==s.charAt(j)){
                i++;
                j--;
            }
            else
                return false;
        }
        return true;
        
    }
}

5.palindrome string(leetcode)

6.To lowercase(leetcode)

class Solution {
    public String toLowerCase(String s) {
        char[] ch = s.toCharArray();
        for(int i=0;i<ch.length;i++){
            if(ch[i]>='A'&&ch[i]<='Z')
                ch[i]+=32;
        }
        String str = new String(ch);
        return str;
    }
}

7.Lower case to upper case(gfg)

class Solution {
    String to_upper(String s) {
        char[] ch = s.toCharArray();
        for(int i=0;i<ch.length;i++){
            if(ch[i]>='a'&&ch[i]<='z')
                ch[i]-=32;
        }
        String str = new String(ch);
        return str;
    }
}
        
8.Valid palindrome(leetcode)

class Solution {
    public boolean isPalindrome(String s) {
        s = s.toLowerCase();
        int i = 0, j = s.length() - 1;
        while (i < j) {
            while (i < j && !Character.isLetterOrDigit(s.charAt(i))) i++;
            while (i < j && !Character.isLetterOrDigit(s.charAt(j))) j--;
            if (s.charAt(i) != s.charAt(j)) return false;
            i++;
            j--;
        }
        return true;
    }
}

9.Extract the integers(gfg)

import java.util.ArrayList;

class Solution {
    ArrayList<String> extractIntegerWords(String s) {
        ArrayList<String> arr = new ArrayList<>();
        
        for (int i = 0; i < s.length(); i++) {
            if (Character.isDigit(s.charAt(i))) {
                String n = "" + s.charAt(i);
                while (i + 1 < s.length() && Character.isDigit(s.charAt(i + 1))) {
                    n += s.charAt(i + 1);
                    i++;
                }
                arr.add(n);
            }
        }
        return arr;
    }
}

10.Reversing vowels(gfg)

class Solution {
    boolean isvowel(char c) {
    return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';
    }

    String modify(String s) {
        char[] c =s.toCharArray();
        int i=0,j=s.length()-1;
        while(i<j){
            if(!isvowel(c[i])&&!isvowel(c[j])){
                i++;j--;
            }
            else if(isvowel(c[i])&&!isvowel(c[j])) j--;
            
            else if(!isvowel(c[i])&&isvowel(c[j])) i++;
            
            else if(isvowel(c[i])&&isvowel(c[j])){
                char temp = c[i];
                c[i] = c[j];
                c[j] = temp;
                i++;j--;
            }
        }
        return new String(c);
    }
}

11. Reverse Vowels of a String

class Solution {
    boolean isvowel(char c) {
    return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'||c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U';
    }
    public String reverseVowels(String s) {
        char[] c =s.toCharArray();
        int i=0,j=s.length()-1;
        while(i<j){
            if(!isvowel(c[i])&&!isvowel(c[j])){
                i++;j--;
            }
            else if(isvowel(c[i])&&!isvowel(c[j])) j--;
            
            else if(!isvowel(c[i])&&isvowel(c[j])) i++;
            
            else if(isvowel(c[i])&&isvowel(c[j])){
                char temp = c[i];
                c[i] = c[j];
                c[j] = temp;
                i++;j--;
            }
        }
        return new String(c);
    }
}

12.longest palindromic substring(leetcode**)

class Solution {
    public boolean ispalin(String c){
        int s=0,e=c.length()-1;
        while(s<e){
            if(c.charAt(s)==c.charAt(e)){
                s++;e--;
            }
            else return false;
        }
        return true;
    }
    public String longestPalindrome(String s) {
        int n = s.length();
        String longpalin ="";
        for(int i=0;i<n;i++){
            for(int j=i+1;j<=n;j++){
                String str = s.substring(i,j);
                if(ispalin(str)){
                    if(longpalin.length()<str.length()) longpalin = str;
                }
            }
        }
        return longpalin;
    }
}

