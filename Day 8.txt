1. Smallest and longest word (GFG)

class Solution {
    public ArrayList<String> smallerAndLarge(String s) {
        ArrayList<String> ans = new ArrayList<>();
        String[] arr=s.split(" ");
        
        String lst = arr[0];
        String sht = arr[0];
        
        for(int i=1;i<arr.length;i++){
            if(arr[i]=="") continue;
            if(sht.length() > arr[i].length()){
                sht = arr[i];
            }
            if(lst.length() <= arr[i].length()){
                lst = arr[i];
            }
        }
        ans.add(sht);
        ans.add(lst);
        return ans;
        
    }
}

2.  Maximum subarray (leetcode - 53)

class Solution {
    public int maxSubArray(int[] nums) {
        int max = nums[0];
        int subMax=0;
        for(int num:nums){
            subMax += num;
            max=Math.max(max,subMax);
            if(subMax<0) subMax=0;
        }
        return max;
    }
}

3.  3Sum (Leetcode - 15)

import java.util.*;

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(nums);  
        
        for(int i = 0; i < nums.length - 2; i++) {
            
            if(i > 0 && nums[i] == nums[i - 1]) continue;

            int left = i + 1;
            int right = nums.length - 1;

            while(left < right) {
                int total = nums[i] + nums[left] + nums[right];
                
                if(total == 0) {
                    result.add(Arrays.asList(nums[i], nums[left], nums[right]));
                    
            
                    while(left < right && nums[left] == nums[left + 1]) left++;
                    
                    
                    while(left < right && nums[right] == nums[right - 1]) right--;
                    
                    left++;
                    right--;
                }
                else if(total < 0) {
                    left++;  
                } 
                else {
                    right--; 
                }
            }
        }
        return result;
    }
}

3. Is Subsequence(leetcode)

class Solution {
    public boolean isSubsequence(String s, String t) {
        int i=0;
        int j=0;
        while(i<t.length()&&j<s.length()){
            if(t.charAt(i)==s.charAt(j)){
                i++;
                j++;
            }else
                i++;    
        }
        if(j==s.length())
            return true;
        return false;    
    }
} 

4.Roman to Integer(leetcode)

class Solution {
    public int intVal(char ch) {
        if(ch=='I')
            return 1;
        else if (ch=='V')
            return 5;   
        else if (ch=='X')
            return 10;  
        else if (ch=='L')
            return 50;  
        else if (ch=='C')
            return 100; 
        else if (ch=='D')
            return 500;
        else if (ch=='M')
            return 1000; 
        else
            return 0;                             
    }
    public int romanToInt(String s){
        int sum=0,i;
        for(i=0;i<s.length()-1;i++){
            if(intVal(s.charAt(i))>=intVal(s.charAt(i+1)))
                sum+=intVal(s.charAt(i));
            else{
                sum+=intVal(s.charAt(i+1))-intVal(s.charAt(i));
                i++;
            }
        }
        if(i!=s.length()) sum+=intVal(s.charAt(i));
            return sum;
    }
}

6.Integer to roman(leetcode)

class Solution {
    public boolean isAnagram(String s, String t) {
        if(s.length()!=t.length())
        return false;
        int[]f=new int[26];
        for(int i=0;i<s.length();i++)
        {
            f[s.charAt(i)-'a']++;
        }
        for(int i=0;i<t.length();i++)
        {
            f[t.charAt(i)-'a']--;
        }
        for(int i=0;i<26;i++)
        {
            if(f[i]!=0)
            return false;
        }
        return true;
    }
}
       
7.
